name: Publish release

on:
  push:
    tags:
      - 'v*'

jobs:

  build:

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        include:
          - os: ubuntu-latest
            suffix: "linux-amd64"
          - os: macos-latest
            suffix: "macos-amd64"
          - os: windows-latest
            suffix: "windows-amd64"
            exe: ".exe"

    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release

      - name: Store artifact
        uses: actions/upload-artifact@v1
        with:
          name: binary-${{ matrix.suffix }}
          path: target/release/rodbot${{ matrix.exe }}

  publish:

    name: Perform release
    runs-on: ubuntu-latest
    needs: build

    steps:

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: RodBot ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Download binary
        uses: actions/download-artifact@v1
        with:
          name: binary-linux-amd64
          path: linux-amd64

      - name: Download binary
        uses: actions/download-artifact@v1
        with:
          name: binary-macos-amd64
          path: macos-amd64

      - name: Download binary
        uses: actions/download-artifact@v1
        with:
          name: binary-windows-amd64
          path: windows-amd64

      - name: Upload Release Assets (linux-amd64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./linux-amd64/rodbot
          asset_name: rodbot-linux-amd64
          asset_content_type: application/octet-stream

      - name: Upload Release Assets (macos-amd64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./macos-amd64/rodbot
          asset_name: rodbot-macos-amd64
          asset_content_type: application/octet-stream

      - name: Upload Release Assets (windows-amd64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./windows-amd64/rodbot.exe
          asset_name: rodbot-windows-amd64
          asset_content_type: application/octet-stream
